pr:
  branches:
    include:
      - dev
  paths:
    exclude:
      - docs/*
      - README.md

trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - README.md
      - azure-pipelines-ci.yml
      - azure-pipelines-ci-cd.yml

variables:
  Prefix: 'fayaz'
  EnvironmentName: '$(System.StageName)'
  BuildConfiguration: 'release'
  ArtifactStagingDirectory: '$(Build.ArtifactStagingDirectory)'
  AzureSubscription: 'Visual Studio Enterprise'
  SonarCloudService: 'SonarCloud'
  Organization: 'fayazkhan'
  ProjectKey: 'AdvancedPipelineDemo'
  ResourceGroupLocation: 'West Europe'
  DatabaseAdmin: '$(DatabaseAdmin)' # Use Azure DevOps Secrets for sensitive data
  DatabasePassword: '$(DatabasePassword)' # Use Azure DevOps Secrets for sensitive data
  WebAppName: '$(Prefix)-$(EnvironmentName)-WebApp'
  SqlServerName: '$(Prefix)-sql-$(EnvironmentName)'
  ResourceGroupName: '$(Prefix)-$(EnvironmentName)-RG'

stages:
- stage: Build_Stage
  displayName: Build Stage
  jobs:
  - job: WebApp
    displayName: Build Web Application
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: restore
        projects: '**/WebApp.csproj'

    - task: WhiteSourceBolt@20
      displayName: 'Dependency Vulnerability Scan'

    - powershell: |
        Write-Host "Adding Project GUIDs to .csproj files"
        $paths = Get-ChildItem -include *.csproj -Recurse
        foreach ($path in $paths) {
            $doc = New-Object System.Xml.XmlDocument
            $doc.Load($path.FullName)
            if (-not $doc.SelectSingleNode("//Project/PropertyGroup/ProjectGuid")) {
                $guid = [guid]::NewGuid().ToString().ToUpper()
                Write-Host "Adding GUID: $guid to $path"
                $child = $doc.CreateElement("ProjectGuid")
                $child.InnerText = $guid
                $node = $doc.SelectSingleNode("//Project/PropertyGroup")
                $node.AppendChild($child)
                $doc.Save($path.FullName)
            }
        }
      displayName: 'PowerShell: Add Project GUIDs'

    - task: SonarCloudPrepare@1
      displayName: 'Prepare Analysis on SonarCloud'
      inputs:
        SonarCloud: $(SonarCloudService)
        organization: $(Organization)
        projectKey: $(ProjectKey)

    - task: DotNetCoreCLI@2
      displayName: 'Build Application'
      inputs:
        command: build
        projects: '**/WebApp.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: test
        projects: '**/*UnitTest*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Application'
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(BuildConfiguration) --output $(ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Code Analysis'

    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Quality Gate Result'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish WebApp Artifacts'
      inputs:
        PathtoPublish: '$(ArtifactStagingDirectory)'
        ArtifactName: 'WebApp'

  - job: Database
    displayName: Build Database Project
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: MSBuild@1
      displayName: 'Build Database Solution'
      inputs:
        solution: 'WebApp.Database/WebApp.Database.sqlproj'
        msbuildArguments: '/p:OutDir=$(ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Database Artifacts'
      inputs:
        PathtoPublish: '$(ArtifactStagingDirectory)'
        ArtifactName: 'Database'

  - job: Selenium
    displayName: Build Selenium UI Tests
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: 'WebAppWithDatabase.sln'

    - task: MSBuild@1
      displayName: 'Build Selenium Tests'
      inputs:
        solution: 'SeleniumUiTests/SeleniumUiTests.csproj'
        msbuildArguments: '/p:OutDir=$(ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Selenium Test Artifacts'
      inputs:
        PathtoPublish: '$(ArtifactStagingDirectory)'
        ArtifactName: 'UI-Tests'

  - job: Infra
    displayName: Publish Infrastructure Files
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish ARM Templates'
      inputs:
        PathtoPublish: 'AzureResourceGroupDeployment'
        ArtifactName: 'ARM'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Terraform Templates'
      inputs:
        PathtoPublish: 'Terraform'
        ArtifactName: 'Terraform'

- stage: Deploy_Stage
  displayName: Deploy Stage
  dependsOn: Build_Stage
  jobs:
  - job: Deploy_Environment
    displayName: Deploy to $(EnvironmentName) Environment
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Deploy ARM Templates'
      inputs:
        azureSubscription: $(AzureSubscription)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(ResourceGroupName)
        location: $(ResourceGroupLocation)
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/**/ARM/WebSiteSQLDatabase.json'
        csmParametersFile: '$(System.DefaultWorkingDirectory)/**/ARM/WebSiteSQLDatabase.parameters.json'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Web Application'
      inputs:
        azureSubscription: $(AzureSubscription)
        WebAppName: $(WebAppName)
        packageForLinux: '$(System.DefaultWorkingDirectory)/WebApp/WebApp.zip'

    - task: SqlAzureDacpacDeployment@1
      displayName: 'Deploy Database to Azure SQL'
      inputs:
        azureSubscription: $(AzureSubscription)
        ServerName: '$(SqlServerName).database.windows.net'
        DatabaseName: '$(Database.Name)'
        SqlUsername: $(DatabaseAdmin)
        SqlPassword: $(DatabasePassword)
        DacpacFile: '$(System.DefaultWorkingDirectory)/Database/WebApp.Database.dacpac'

    - task: VSTest@2
      displayName: 'Run Selenium UI Tests'
      inputs:
        testSelector: 'testAssemblies'
        searchFolder: '$(System.DefaultWorkingDirectory)/UI-Tests'
