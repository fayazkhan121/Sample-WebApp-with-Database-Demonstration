trigger: none # Disables CI builds entirely; trigger manually as needed

variables:
  BuildConfiguration: 'release'
  Organization: 'fayazkhan'
  ProjectKey: 'WebAppWithDatabaseDemo'
  ArtifactStagingDirectory: '$(Build.ArtifactStagingDirectory)'

jobs:
- job: Build_WebApp
  displayName: 'Build Web Application'
  pool:
    vmImage: 'windows-2019'
    demands: java
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Restore Dependencies'
    inputs:
      command: restore
      projects: '**/WebApp.csproj'

  - powershell: |
      Write-Host "Adding Project GUIDs to .csproj files"
      $paths = Get-ChildItem -include *.csproj -Recurse
      foreach ($path in $paths) {
          $doc = New-Object System.Xml.XmlDocument
          $doc.Load($path.FullName)
          if (-not $doc.SelectSingleNode("//Project/PropertyGroup/ProjectGuid")) {
              $guid = [guid]::NewGuid().ToString().ToUpper()
              Write-Host "Adding GUID: $guid to $path"
              $child = $doc.CreateElement("ProjectGuid")
              $child.InnerText = $guid
              $node = $doc.SelectSingleNode("//Project/PropertyGroup")
              $node.AppendChild($child)
              $doc.Save($path.FullName)
          }
      }
    displayName: 'PowerShell: Add Project GUIDs'
    workingDirectory: WebApp

  - task: SonarCloudPrepare@1
    displayName: 'Prepare Analysis on SonarCloud'
    inputs:
      SonarCloud: $(SonarCloudService)
      organization: $(Organization)
      projectKey: $(ProjectKey)

  - task: DotNetCoreCLI@2
    displayName: 'Build Application'
    inputs:
      command: build
      projects: '**/WebApp.csproj'
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests'
    inputs:
      command: test
      projects: '**/*UnitTest*.csproj'
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Publish Application'
    inputs:
      command: publish
      publishWebProjects: true
      arguments: '--configuration $(BuildConfiguration) --output $(ArtifactStagingDirectory)'
      zipAfterPublish: true

  - task: SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'

  - task: SonarCloudPublish@1
    displayName: 'Publish SonarCloud Quality Gate Result'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish WebApp Artifact'
    inputs:
      PathtoPublish: '$(ArtifactStagingDirectory)'
      ArtifactName: 'WebApp'

- job: Build_Database
  displayName: 'Build Database Project'
  pool:
    vmImage: 'windows-2019'
    demands: msbuild
  steps:
  - task: MSBuild@1
    displayName: 'Build Database Solution'
    inputs:
      solution: 'WebApp.Database/WebApp.Database.sqlproj'
      msbuildArguments: '/p:OutDir=$(ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Database Artifact'
    inputs:
      PathtoPublish: '$(ArtifactStagingDirectory)'
      ArtifactName: 'Database'

- job: Build_UI_Tests
  displayName: 'Build Selenium UI Tests'
  pool:
    vmImage: 'windows-2019'
    demands: msbuild
  steps:
  - task: NuGetCommand@2
    displayName: 'Restore NuGet Packages'
    inputs:
      restoreSolution: 'WebAppWithDatabase.sln'

  - task: MSBuild@1
    displayName: 'Build Selenium Tests'
    inputs:
      solution: 'SeleniumUiTests/SeleniumUiTests.csproj'
      msbuildArguments: '/p:OutDir=$(ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Selenium Test Artifacts'
    inputs:
      PathtoPublish: '$(ArtifactStagingDirectory)'
      ArtifactName: 'UI-Tests'

- job: Publish_Infrastructure
  displayName: 'Publish Infrastructure Files'
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: PublishBuildArtifacts@1
    displayName: 'Publish ARM Templates'
    inputs:
      PathtoPublish: 'AzureResourceGroupDeployment'
      ArtifactName: 'ARM'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform Files'
    inputs:
      PathtoPublish: 'Terraform'
      ArtifactName: 'Terraform'

- job: Deploy_Environment
  displayName: 'Deploy to Target Environment'
  pool:
    vmImage: 'windows-2019'
  variables:
    EnvironmentName: 'Dev' # Change this for other environments (Test, Prod)
    WebAppName: '$(Organization)-$(EnvironmentName)-WebApp'
    ResourceGroupName: '$(Organization)-$(EnvironmentName)-RG'
    SqlServerName: '$(Organization)-sql-$(EnvironmentName)'
    DatabaseName: 'WebAppDB'
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: 'WebApp'
      downloadPath: '$(System.DefaultWorkingDirectory)'

  - task: AzureRmWebAppDeployment@4
    displayName: 'Deploy Web Application'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      appType: 'webApp'
      WebAppName: '$(WebAppName)'
      packageForLinux: '$(System.DefaultWorkingDirectory)/WebApp/WebApp.zip'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Database Artifacts'
    inputs:
      artifactName: 'Database'
      downloadPath: '$(System.DefaultWorkingDirectory)'

  - task: SqlAzureDacpacDeployment@1
    displayName: 'Deploy Database to Azure SQL'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      ServerName: '$(SqlServerName).database.windows.net'
      DatabaseName: '$(DatabaseName)'
      SqlUsername: '$(SqlAdminUser)'
      SqlPassword: '$(SqlAdminPassword)'
      DacpacFile: '$(System.DefaultWorkingDirectory)/Database/WebApp.Database.dacpac'
